mukuai.js:
/**
 * Created by Administrator on 2018/6/1.
 */
//定义模块：移动滚动条到指定的位置 以及 移动的速度
//只有入口js文件采用requirejs来引入模块文件，
// 其他模块文件依赖都用define来引入
define(['jquery'],function ($) {
    //创建一个构造函数 首字母大写区别
    //opts:用户传递的参数
    function Mukuai(opts) {
        //判断是用用户参数还是默认参数
        //{}传递一个空对象，默认参数Mukuai.MOREN，用户参数opts
        //让用户参数覆盖默认参数，生成一个新对象{} 然后返回新的对象
        //返回的值 通过this.opts属性保存
        this.opts = $.extend({},Mukuai.MOREN,opts);
        //整理重复
        this.$el =  $('html,body');
    }

    //将所有的方法添加到构造函数的原型上，内存可以只保存一份方法

    //慢速
    Mukuai.prototype.move = function () {
        //整理重复
        var opts = this.opts,
            juli = opts.juli;

        //是否到达目的地 scrollTop是否等于最终目的地opts
        if ($(window).scrollTop() !=juli){
            //是否正在滑动 在true 不在false
            // 只有不在滑动时才执行
            if (!this.$el.is(':animated')){
                   this.$el.animate({
                     scrollTop:juli
                 },opts.sudu)
            }
        }
    };

    //快速
    Mukuai.prototype.go = function () {
        //整理重复
        var juli = this.opts.juli;

        //只有没有到达目的地的时候才执行这个方法
        if ($(window).scrollTop() !=juli){
            this.$el.scrollTop(juli);
        }
    };


    //默认的参数Mukuai.MOREN
    Mukuai.MOREN = {
        juli:0,
        sudu:800
    };

    //将编译好的模块返回出去，使其能与外部通信
    return{
      fanhui:Mukuai
    };
});


backTop.js:
//定义模块：对返回按钮进行模块化
//只有入口js文件采用requirejs来引入模块文件，
// 其他模块文件依赖都用define来引入
define(['jquery','mukuai'],function ($,mokuai) {
    //创建一个构造函数 首字母大写区别
    //el:是哪一个按钮  opts:用户传递的参数
    function backTop(el,opts) {
        //保存变量
        this.opts = $.extend({},backTop.ANNIU,opts);
        //保存对象，并转为jQuery对象
        this.$el = $(el);

        this.kuai = new mokuai.fanhui({
            //可以用的参数
            //距离
            juli:0,
            //速度
            sudu:this.opts.sudu
        });

        //为按钮添加点击时间
        //用proxy改变当前指向，指向构造函数的实例backTop
        //_下划线的含义是 仅在内部使用
        if (this.opts.mode == 'move'){
            this.$el.on('click',$.proxy(this._move, this));
        }else {
            this.$el.on('click',$.proxy(this._go, this));
        }
        //为滚动条添加滚动事件
        $(window).on('scroll',$.proxy(this._weizhi,this));
    }

    //默认参数  决定是慢速到顶部还是直接到顶部
    backTop.ANNIU ={
        //当mode是 move慢速返回,否则快速
        mode:'move',
        //pos 可视区的高度，滚动超过一屏时显示
        pos:$(window).height(),
        sudu:800
    };

    backTop.prototype._move = function () {
        this.kuai.move();
    };
    backTop.prototype._go = function () {
        this.kuai.go();
    };
    backTop.prototype._weizhi = function () {
        var $el = this.$el;
        if ($(window).scrollTop() > this.opts.pos){
            $el.fadeIn();
        }else {
            $el.fadeOut();
        }
    };

 //jQuery 插件的写法
    $.fn.extend({
       //命名插件 backtop
        backtop:function (opts) {
            return this.each(function () {
                //this.each 防止是class 所以遍历所以按钮
                //this就是返回顶部的按钮
                new backTop(this,opts)
            });
        }
    });

    return{
        fanhui:backTop
    };
});


main.js:
//创建requirejs
requirejs.config({
    paths:{
        'jquery':'jquery'
    }
});

//接收，用$表示jquery.js  用backTop表示backTop.js
requirejs(['jquery','backTop'],function ($,backTop) {

     //注册成jQuery插件
    $('#backTop').backtop({
        mode: 'move'
     }
    )

});